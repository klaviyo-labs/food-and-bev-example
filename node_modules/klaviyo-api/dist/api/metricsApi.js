"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsApi = void 0;
const axios = require('axios');
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
class MetricsApi {
    constructor(session) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    /**
     * Create a new custom metric.  Custom metric objects must include a `name` and `definition`.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`<br>Daily: `15/d`  **Scopes:** `metrics:write`
     * @summary Create Custom Metric
     * @param customMetricCreateQuery Create a custom metric.
     
     */
    createCustomMetric(customMetricCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'customMetricCreateQuery' is not null or undefined
            if (customMetricCreateQuery === null || customMetricCreateQuery === undefined) {
                throw new Error('Required parameter customMetricCreateQuery was null or undefined when calling createCustomMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(customMetricCreateQuery, "CustomMetricCreateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCustomMetricResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Delete a custom metric with the given custom metric ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:write`
     * @summary Delete Custom Metric
     * @param id The ID of the custom metric
     
     */
    deleteCustomMetric(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteCustomMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'DELETE',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get a custom metric with the given custom metric ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:read`
     * @summary Get Custom Metric
     * @param id The ID of the custom metric
     * @param fieldsCustomMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships
     */
    getCustomMetric(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCustomMetric.');
            }
            if (options.fieldsCustomMetric !== undefined) {
                localVarQueryParameters['fields[custom-metric]'] = models_1.ObjectSerializer.serialize(options.fieldsCustomMetric, "Array<'name' | 'created' | 'updated' | 'definition' | 'definition.aggregation_method' | 'definition.metric_groups'>");
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'metrics'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCustomMetricResponseCompoundDocument");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all custom metrics in an account.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:read`
     * @summary Get Custom Metrics
     
     * @param fieldsCustomMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships
     */
    getCustomMetrics(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsCustomMetric !== undefined) {
                localVarQueryParameters['fields[custom-metric]'] = models_1.ObjectSerializer.serialize(options.fieldsCustomMetric, "Array<'name' | 'created' | 'updated' | 'definition' | 'definition.aggregation_method' | 'definition.metric_groups'>");
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'metrics'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCustomMetricResponseCollectionCompoundDocument");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all flows where the given metric is being used as the trigger.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `flows:read` `metrics:read`
     * @summary Get Flows Triggered by Metric
     * @param id
     * @param fieldsFlow For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getFlowsTriggeredByMetric(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics/{id}/flow-triggers'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFlowsTriggeredByMetric.');
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetFlowResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the IDs of all flows where the given metric is being used as the trigger.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `flows:read` `metrics:read`
     * @summary Get IDs for Flows Triggered by Metric
     * @param id
     
     */
    getIdsForFlowsTriggeredByMetric(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics/{id}/relationships/flow-triggers'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdsForFlowsTriggeredByMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricFlowTriggersRelationshipsResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get a metric with the given metric ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `metrics:read`
     * @summary Get Metric
     * @param id Metric ID
     * @param fieldsFlow For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships
     */
    getMetric(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetric.');
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow-triggers'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricResponseCompoundDocument");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the metric for the given metric property ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `metrics:read`
     * @summary Get Metric for Metric Property
     * @param id The ID of the metric property
     * @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getMetricForMetricProperty(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metric-properties/{id}/metric'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetricForMetricProperty.');
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the ID of the metric for the given metric property.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `metrics:read`
     * @summary Get Metric ID for Metric Property
     * @param id The ID of the metric property
     
     */
    getMetricIdForMetricProperty(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metric-properties/{id}/relationships/metric'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetricIdForMetricProperty.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricPropertyMetricRelationshipResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all metrics for the given custom metric ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:read`
     * @summary Get Metric IDs for Custom Metric
     * @param id The ID of the custom metric
     
     */
    getMetricIdsForCustomMetric(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics/{id}/relationships/metrics'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetricIdsForCustomMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetCustomMetricMetricsRelationshipsResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get a metric property with the given metric property ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `metrics:read`
     * @summary Get Metric Property
     * @param id The ID of the metric property
     * @param additionalFieldsMetricProperty Request additional fields not included by default in the response. Supported values: \&#39;sample_values\&#39;* @param fieldsMetricProperty For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships
     */
    getMetricProperty(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metric-properties/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetricProperty.');
            }
            if (options.additionalFieldsMetricProperty !== undefined) {
                localVarQueryParameters['additional-fields[metric-property]'] = models_1.ObjectSerializer.serialize(options.additionalFieldsMetricProperty, "Array<'sample_values'>");
            }
            if (options.fieldsMetricProperty !== undefined) {
                localVarQueryParameters['fields[metric-property]'] = models_1.ObjectSerializer.serialize(options.fieldsMetricProperty, "Array<'label' | 'property' | 'inferred_type' | 'sample_values'>");
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'metric'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricPropertyResponseCompoundDocument");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all metrics in an account.  Requests can be filtered by the following fields: integration `name`, integration `category`  Returns a maximum of 200 results per page.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `metrics:read`
     * @summary Get Metrics
     
     * @param fieldsFlow For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;integration.name&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;integration.category&#x60;: &#x60;equals&#x60;* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
     */
    getMetrics(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsFlow !== undefined) {
                localVarQueryParameters['fields[flow]'] = models_1.ObjectSerializer.serialize(options.fieldsFlow, "Array<'name' | 'status' | 'archived' | 'created' | 'updated' | 'trigger_type'>");
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.include !== undefined) {
                localVarQueryParameters['include'] = models_1.ObjectSerializer.serialize(options.include, "Array<'flow-triggers'>");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricResponseCollectionCompoundDocument");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all metrics for the given custom metric ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:read`
     * @summary Get Metrics for Custom Metric
     * @param id The ID of the custom metric
     * @param fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getMetricsForCustomMetric(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics/{id}/metrics'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getMetricsForCustomMetric.');
            }
            if (options.fieldsMetric !== undefined) {
                localVarQueryParameters['fields[metric]'] = models_1.ObjectSerializer.serialize(options.fieldsMetric, "Array<'name' | 'created' | 'updated' | 'integration'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the metric properties for the given metric ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `metrics:read`
     * @summary Get Properties for Metric
     * @param id The ID of the metric
     * @param additionalFieldsMetricProperty Request additional fields not included by default in the response. Supported values: \&#39;sample_values\&#39;* @param fieldsMetricProperty For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getPropertiesForMetric(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics/{id}/metric-properties'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getPropertiesForMetric.');
            }
            if (options.additionalFieldsMetricProperty !== undefined) {
                localVarQueryParameters['additional-fields[metric-property]'] = models_1.ObjectSerializer.serialize(options.additionalFieldsMetricProperty, "Array<'sample_values'>");
            }
            if (options.fieldsMetricProperty !== undefined) {
                localVarQueryParameters['fields[metric-property]'] = models_1.ObjectSerializer.serialize(options.fieldsMetricProperty, "Array<'label' | 'property' | 'inferred_type' | 'sample_values'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricPropertyResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the IDs of metric properties for the given metric.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`  **Scopes:** `metrics:read`
     * @summary Get Property IDs for Metric
     * @param id The ID of the metric
     
     */
    getPropertyIdsForMetric(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metrics/{id}/relationships/metric-properties'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getPropertyIdsForMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetMetricPropertiesRelationshipsResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Query and aggregate event data associated with a metric, including native Klaviyo metrics, integration-specific metrics, and custom events (not to be confused with [custom metrics](https://developers.klaviyo.com/en/reference/custom_metrics_api_overview), which are not supported at this time). Queries must be passed in the JSON body of your `POST` request.  To request campaign and flow performance data that matches the data shown in Klaviyo\'s UI, we recommend the [Reporting API](https://developers.klaviyo.com/en/reference/reporting_api_overview).  Results can be filtered and grouped by time, event, or profile dimensions.  To learn more about how to use this endpoint, check out our new [Using the Query Metric Aggregates Endpoint guide](https://developers.klaviyo.com/en/docs/using-the-query-metric-aggregates-endpoint).  For a comprehensive list of request body parameters, native Klaviyo metrics, and their associated attributes for grouping and filtering, please refer to the [metrics attributes guide](https://developers.klaviyo.com/en/docs/supported_metrics_and_attributes).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `metrics:read`
     * @summary Query Metric Aggregates
     * @param metricAggregateQuery Retrieve Metric Aggregations
     
     */
    queryMetricAggregates(metricAggregateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/metric-aggregates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'metricAggregateQuery' is not null or undefined
            if (metricAggregateQuery === null || metricAggregateQuery === undefined) {
                throw new Error('Required parameter metricAggregateQuery was null or undefined when calling queryMetricAggregates.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(metricAggregateQuery, "MetricAggregateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostMetricAggregateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Update a custom metric with the given custom metric ID.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`<br>Daily: `15/d`  **Scopes:** `metrics:write`
     * @summary Update Custom Metric
     * @param id The ID of the custom metric* @param customMetricPartialUpdateQuery Update a custom metric by ID.
     
     */
    updateCustomMetric(id, customMetricPartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/custom-metrics/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCustomMetric.');
            }
            // verify required parameter 'customMetricPartialUpdateQuery' is not null or undefined
            if (customMetricPartialUpdateQuery === null || customMetricPartialUpdateQuery === undefined) {
                throw new Error('Required parameter customMetricPartialUpdateQuery was null or undefined when calling updateCustomMetric.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(customMetricPartialUpdateQuery, "CustomMetricPartialUpdateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchCustomMetricResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
}
exports.MetricsApi = MetricsApi;
MetricsApi.prototype.getFlowTriggersForMetric = MetricsApi.prototype.getFlowsTriggeredByMetric;
MetricsApi.prototype.getMetricFlowTriggers = MetricsApi.prototype.getFlowsTriggeredByMetric;
MetricsApi.prototype.getFlowTriggerIdsForMetric = MetricsApi.prototype.getIdsForFlowsTriggeredByMetric;
MetricsApi.prototype.getMetricRelationshipsFlowTriggers = MetricsApi.prototype.getIdsForFlowsTriggeredByMetric;
MetricsApi.prototype.getMetricPropertyMetric = MetricsApi.prototype.getMetricForMetricProperty;
MetricsApi.prototype.getMetricPropertyRelationshipsMetric = MetricsApi.prototype.getMetricIdForMetricProperty;
MetricsApi.prototype.getCustomMetricRelationshipsMetrics = MetricsApi.prototype.getMetricIdsForCustomMetric;
MetricsApi.prototype.getCustomMetricMetrics = MetricsApi.prototype.getMetricsForCustomMetric;
MetricsApi.prototype.getMetricMetricProperties = MetricsApi.prototype.getPropertiesForMetric;
MetricsApi.prototype.getMetricProperties = MetricsApi.prototype.getPropertiesForMetric;
MetricsApi.prototype.getMetricRelationshipsMetricProperties = MetricsApi.prototype.getPropertyIdsForMetric;
MetricsApi.prototype.getMetricRelationshipsProperties = MetricsApi.prototype.getPropertyIdsForMetric;
MetricsApi.prototype.createMetricAggregate = MetricsApi.prototype.queryMetricAggregates;
//# sourceMappingURL=metricsApi.js.map