"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplatesApi = void 0;
const axios = require('axios');
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
class TemplatesApi {
    constructor(session) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    /**
     * Create a clone of a template with the given template ID.  If there are 1,000 or more templates in an account, cloning will fail as there is a limit of 1,000 templates that can be created via the API.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Clone Template
     * @param templateCloneQuery
     
     */
    cloneTemplate(templateCloneQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-clone';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'templateCloneQuery' is not null or undefined
            if (templateCloneQuery === null || templateCloneQuery === undefined) {
                throw new Error('Required parameter templateCloneQuery was null or undefined when calling cloneTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(templateCloneQuery, "TemplateCloneQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostTemplateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Create a new custom HTML template.  If there are 1,000 or more templates in an account, creation will fail as there is a limit of 1,000 templates that can be created via the API.  Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/reference/api_overview#sparse-fieldsets).<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Create Template
     * @param templateCreateQuery
     
     */
    createTemplate(templateCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/templates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'templateCreateQuery' is not null or undefined
            if (templateCreateQuery === null || templateCreateQuery === undefined) {
                throw new Error('Required parameter templateCreateQuery was null or undefined when calling createTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(templateCreateQuery, "TemplateCreateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostTemplateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Create universal content. Only text blocks, which can include text or HTML, are supported at this time.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Create Universal Content
     * @param universalContentCreateQuery Create a template universal content
     
     */
    createUniversalContent(universalContentCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-universal-content';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'universalContentCreateQuery' is not null or undefined
            if (universalContentCreateQuery === null || universalContentCreateQuery === undefined) {
                throw new Error('Required parameter universalContentCreateQuery was null or undefined when calling createUniversalContent.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(universalContentCreateQuery, "UniversalContentCreateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostUniversalContentResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Delete a template with the given template ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Delete Template
     * @param id The ID of template
     
     */
    deleteTemplate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/templates/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'DELETE',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Delete the universal content with the given ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Delete Universal Content
     * @param id The ID of the template universal content
     
     */
    deleteUniversalContent(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-universal-content/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteUniversalContent.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'DELETE',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all universal content in an account.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:read`
     * @summary Get All Universal Content
     
     * @param fieldsTemplateUniversalContent For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;definition.content_type&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;definition.type&#x60;: &#x60;equals&#x60;* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param pageSize Default: 20. Min: 1. Max: 100.* @param sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
     */
    getAllUniversalContent(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-universal-content';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsTemplateUniversalContent !== undefined) {
                localVarQueryParameters['fields[template-universal-content]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplateUniversalContent, "Array<'name' | 'definition' | 'definition.content_type' | 'definition.type' | 'definition.data' | 'definition.data.content' | 'definition.data.display_options' | 'definition.data.display_options.show_on' | 'definition.data.display_options.visible_check' | 'definition.data.display_options.content_repeat' | 'definition.data.display_options.content_repeat.repeat_for' | 'definition.data.display_options.content_repeat.item_alias' | 'definition.data.styles' | 'definition.data.styles.background_color' | 'definition.data.styles.block_background_color' | 'definition.data.styles.block_border_color' | 'definition.data.styles.block_border_style' | 'definition.data.styles.block_border_width' | 'definition.data.styles.block_padding_bottom' | 'definition.data.styles.block_padding_left' | 'definition.data.styles.block_padding_right' | 'definition.data.styles.block_padding_top' | 'definition.data.styles.color' | 'definition.data.styles.extra_css_class' | 'definition.data.styles.font_family' | 'definition.data.styles.font_size' | 'definition.data.styles.font_style' | 'definition.data.styles.font_weight' | 'definition.data.styles.inner_padding_bottom' | 'definition.data.styles.inner_padding_left' | 'definition.data.styles.inner_padding_right' | 'definition.data.styles.inner_padding_top' | 'definition.data.styles.letter_spacing' | 'definition.data.styles.line_height' | 'definition.data.styles.mobile_stretch_content' | 'definition.data.styles.text_align' | 'definition.data.styles.text_decoration' | 'definition.data.styles.text_table_layout' | 'created' | 'updated' | 'screenshot_status' | 'screenshot_url'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetUniversalContentResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get a template with the given template ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:read`
     * @summary Get Template
     * @param id The ID of template
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getTemplate(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/templates/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTemplate.');
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'amp' | 'created' | 'updated'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTemplateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all templates in an account.  Filter to request a subset of all templates. Templates can be sorted by the following fields, in ascending and descending order: `id`, `name`, `created`, `updated`  Returns a maximum of 10 results per page.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:read`
     * @summary Get Templates
     
     * @param fieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
     */
    getTemplates(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/templates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsTemplate !== undefined) {
                localVarQueryParameters['fields[template]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplate, "Array<'name' | 'editor_type' | 'html' | 'text' | 'amp' | 'created' | 'updated'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'created' | '-created' | 'id' | '-id' | 'name' | '-name' | 'updated' | '-updated'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTemplateResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get the universal content with the given ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:read`
     * @summary Get Universal Content
     * @param id The ID of the universal content
     * @param fieldsTemplateUniversalContent For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getUniversalContent(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-universal-content/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getUniversalContent.');
            }
            if (options.fieldsTemplateUniversalContent !== undefined) {
                localVarQueryParameters['fields[template-universal-content]'] = models_1.ObjectSerializer.serialize(options.fieldsTemplateUniversalContent, "Array<'name' | 'definition' | 'definition.content_type' | 'definition.type' | 'definition.data' | 'definition.data.content' | 'definition.data.display_options' | 'definition.data.display_options.show_on' | 'definition.data.display_options.visible_check' | 'definition.data.display_options.content_repeat' | 'definition.data.display_options.content_repeat.repeat_for' | 'definition.data.display_options.content_repeat.item_alias' | 'definition.data.styles' | 'definition.data.styles.background_color' | 'definition.data.styles.block_background_color' | 'definition.data.styles.block_border_color' | 'definition.data.styles.block_border_style' | 'definition.data.styles.block_border_width' | 'definition.data.styles.block_padding_bottom' | 'definition.data.styles.block_padding_left' | 'definition.data.styles.block_padding_right' | 'definition.data.styles.block_padding_top' | 'definition.data.styles.color' | 'definition.data.styles.extra_css_class' | 'definition.data.styles.font_family' | 'definition.data.styles.font_size' | 'definition.data.styles.font_style' | 'definition.data.styles.font_weight' | 'definition.data.styles.inner_padding_bottom' | 'definition.data.styles.inner_padding_left' | 'definition.data.styles.inner_padding_right' | 'definition.data.styles.inner_padding_top' | 'definition.data.styles.letter_spacing' | 'definition.data.styles.line_height' | 'definition.data.styles.mobile_stretch_content' | 'definition.data.styles.text_align' | 'definition.data.styles.text_decoration' | 'definition.data.styles.text_table_layout' | 'created' | 'updated' | 'screenshot_status' | 'screenshot_url'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetUniversalContentResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Render a template with the given template ID and context attribute. Returns the AMP, HTML, and plain text versions of the email template.  **Request body parameters** (nested under `attributes`):  * `return_fields`: Request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/reference/api_overview#sparse-fieldsets).  * `context`: This is the context your email template will be rendered with. You must pass in a `context` object as a JSON object.  Email templates are rendered with contexts in a similar manner to Django templates. Nested template variables can be referenced via dot notation. Template variables without corresponding `context` values are treated as `FALSE` and output nothing.  Ex. `{ \"name\" : \"George Washington\", \"state\" : \"VA\" }`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `templates:read`
     * @summary Render Template
     * @param templateRenderQuery
     
     */
    renderTemplate(templateRenderQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-render';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'templateRenderQuery' is not null or undefined
            if (templateRenderQuery === null || templateRenderQuery === undefined) {
                throw new Error('Required parameter templateRenderQuery was null or undefined when calling renderTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(templateRenderQuery, "TemplateRenderQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostTemplateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Update a template with the given template ID. Does not currently update drag & drop templates.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Update Template
     * @param id The ID of template* @param templateUpdateQuery
     
     */
    updateTemplate(id, templateUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/templates/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTemplate.');
            }
            // verify required parameter 'templateUpdateQuery' is not null or undefined
            if (templateUpdateQuery === null || templateUpdateQuery === undefined) {
                throw new Error('Required parameter templateUpdateQuery was null or undefined when calling updateTemplate.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(templateUpdateQuery, "TemplateUpdateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchTemplateResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Update universal content. The `definition` field can only be updated for text blocks at this time.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `templates:write`
     * @summary Update Universal Content
     * @param id The ID of the template universal content* @param universalContentPartialUpdateQuery Update a universal content by ID
     
     */
    updateUniversalContent(id, universalContentPartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/template-universal-content/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateUniversalContent.');
            }
            // verify required parameter 'universalContentPartialUpdateQuery' is not null or undefined
            if (universalContentPartialUpdateQuery === null || universalContentPartialUpdateQuery === undefined) {
                throw new Error('Required parameter universalContentPartialUpdateQuery was null or undefined when calling updateUniversalContent.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(universalContentPartialUpdateQuery, "UniversalContentPartialUpdateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchUniversalContentResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
}
exports.TemplatesApi = TemplatesApi;
TemplatesApi.prototype.createTemplateClone = TemplatesApi.prototype.cloneTemplate;
TemplatesApi.prototype.createTemplateUniversalContent = TemplatesApi.prototype.createUniversalContent;
TemplatesApi.prototype.deleteTemplateUniversalContent = TemplatesApi.prototype.deleteUniversalContent;
TemplatesApi.prototype.getTemplateUniversalContent = TemplatesApi.prototype.getAllUniversalContent;
TemplatesApi.prototype.createTemplateRender = TemplatesApi.prototype.renderTemplate;
TemplatesApi.prototype.updateTemplateUniversalContent = TemplatesApi.prototype.updateUniversalContent;
//# sourceMappingURL=templatesApi.js.map