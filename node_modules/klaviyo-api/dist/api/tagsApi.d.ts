/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosResponse } from "axios";
import { DeleteTagGroupResponse } from '../model/deleteTagGroupResponse';
import { GetTagCampaignRelationshipsResponseCollection } from '../model/getTagCampaignRelationshipsResponseCollection';
import { GetTagFlowRelationshipsResponseCollection } from '../model/getTagFlowRelationshipsResponseCollection';
import { GetTagGroupRelationshipResponse } from '../model/getTagGroupRelationshipResponse';
import { GetTagGroupResponse } from '../model/getTagGroupResponse';
import { GetTagGroupResponseCollection } from '../model/getTagGroupResponseCollection';
import { GetTagGroupTagsRelationshipsResponseCollection } from '../model/getTagGroupTagsRelationshipsResponseCollection';
import { GetTagListRelationshipsResponseCollection } from '../model/getTagListRelationshipsResponseCollection';
import { GetTagResponseCollection } from '../model/getTagResponseCollection';
import { GetTagResponseCollectionCompoundDocument } from '../model/getTagResponseCollectionCompoundDocument';
import { GetTagResponseCompoundDocument } from '../model/getTagResponseCompoundDocument';
import { GetTagSegmentRelationshipsResponseCollection } from '../model/getTagSegmentRelationshipsResponseCollection';
import { PatchTagGroupResponse } from '../model/patchTagGroupResponse';
import { PostTagGroupResponse } from '../model/postTagGroupResponse';
import { PostTagResponse } from '../model/postTagResponse';
import { TagCampaignOp } from '../model/tagCampaignOp';
import { TagCreateQuery } from '../model/tagCreateQuery';
import { TagFlowOp } from '../model/tagFlowOp';
import { TagGroupCreateQuery } from '../model/tagGroupCreateQuery';
import { TagGroupUpdateQuery } from '../model/tagGroupUpdateQuery';
import { TagListOp } from '../model/tagListOp';
import { TagSegmentOp } from '../model/tagSegmentOp';
import { TagUpdateQuery } from '../model/tagUpdateQuery';
import { Session } from './apis';
export declare class TagsApi {
    session: Session;
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    constructor(session: Session);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    /**
     * Create a tag. An account cannot have more than **500** unique tags.  A tag belongs to a single tag group. If the `tag_group_id` is not specified, the tag is added to the account\'s default tag group.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Create Tag
     * @param tagCreateQuery
     
     */
    createTag(tagCreateQuery: TagCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostTagResponse;
    }>;
    /**
     * Create a tag group. An account cannot have more than **50** unique tag groups.  If `exclusive` is not specified `true` or `false`, the tag group defaults to non-exclusive.  If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Create Tag Group
     * @param tagGroupCreateQuery
     
     */
    createTagGroup(tagGroupCreateQuery: TagGroupCreateQuery): Promise<{
        response: AxiosResponse;
        body: PostTagGroupResponse;
    }>;
    /**
     * Delete the tag with the given tag ID. Any associations between the tag and other resources will also be removed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Delete Tag
     * @param id The Tag ID
     
     */
    deleteTag(id: string): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Delete the tag group with the given tag group ID.  Any tags inside that tag group, and any associations between those tags and other resources, will also be removed. The default tag group cannot be deleted.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Delete Tag Group
     * @param id The Tag Group ID
     
     */
    deleteTagGroup(id: string): Promise<{
        response: AxiosResponse;
        body: DeleteTagGroupResponse;
    }>;
    /**
     * Returns the IDs of all campaigns associated with the given tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `campaigns:read` `tags:read`
     * @summary Get Campaign IDs for Tag
     * @param id The Tag ID
     
     */
    getCampaignIdsForTag(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagCampaignRelationshipsResponseCollection;
    }>;
    /**
     * Returns the IDs of all flows associated with the given tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read` `tags:read`
     * @summary Get Flow IDs for Tag
     * @param id The Tag ID
     
     */
    getFlowIdsForTag(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagFlowRelationshipsResponseCollection;
    }>;
    /**
     * Returns the IDs of all lists associated with the given tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `lists:read` `tags:read`
     * @summary Get List IDs for Tag
     * @param id The Tag ID
     
     */
    getListIdsForTag(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagListRelationshipsResponseCollection;
    }>;
    /**
     * Returns the IDs of all segments associated with the given tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `segments:read` `tags:read`
     * @summary Get Segment IDs for Tag
     * @param id The Tag ID
     
     */
    getSegmentIdsForTag(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagSegmentRelationshipsResponseCollection;
    }>;
    /**
     * Retrieve the tag with the given tag ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag
     * @param id The Tag ID
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships
     */
    getTag(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        fieldsTag?: Array<'name'>;
        include?: Array<'tag-group'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCompoundDocument;
    }>;
    /**
     * Retrieve the tag group with the given tag group ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag Group
     * @param id The Tag Group ID
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getTagGroup(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponse;
    }>;
    /**
     * Returns the tag group resource for a given tag ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag Group for Tag
     * @param id The Tag ID
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getTagGroupForTag(id: string, options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponse;
    }>;
    /**
     * Returns the id of the tag group related to the given tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag Group ID for Tag
     * @param id The Tag ID
     
     */
    getTagGroupIdForTag(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagGroupRelationshipResponse;
    }>;
    /**
     * List all tag groups in an account. Every account has one default tag group.  Tag groups can be filtered by `name`, `exclusive`, and `default`, and sorted by `name` or `id` in ascending or descending order.  Returns a maximum of 25 tag groups per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag Groups
     
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;exclusive&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;default&#x60;: &#x60;equals&#x60;* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
     */
    getTagGroups(options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        filter?: string;
        pageCursor?: string;
        sort?: 'id' | '-id' | 'name' | '-name';
    }): Promise<{
        response: AxiosResponse;
        body: GetTagGroupResponseCollection;
    }>;
    /**
     * Returns the tag IDs of all tags inside the given tag group.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tag IDs for Tag Group
     * @param id The Tag Group ID
     
     */
    getTagIdsForTagGroup(id: string): Promise<{
        response: AxiosResponse;
        body: GetTagGroupTagsRelationshipsResponseCollection;
    }>;
    /**
     * List all tags in an account.  Tags can be filtered by `name`, and sorted by `name` or `id` in ascending or descending order.  Returns a maximum of 50 tags per request, which can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/v2022-10-17/reference/api_overview#pagination).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tags
     
     * @param fieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;* @param include For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#relationships* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
     */
    getTags(options?: {
        fieldsTagGroup?: Array<'name' | 'exclusive' | 'default'>;
        fieldsTag?: Array<'name'>;
        filter?: string;
        include?: Array<'tag-group'>;
        pageCursor?: string;
        sort?: 'id' | '-id' | 'name' | '-name';
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollectionCompoundDocument;
    }>;
    /**
     * Return the tags for a given tag group ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read`
     * @summary Get Tags for Tag Group
     * @param id The Tag Group ID
     * @param fieldsTag For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getTagsForTagGroup(id: string, options?: {
        fieldsTag?: Array<'name'>;
    }): Promise<{
        response: AxiosResponse;
        body: GetTagResponseCollection;
    }>;
    /**
     * Remove a tag\'s association with one or more campaigns.   Use the request body to pass in the ID(s) of the campaign(s) whose association with the tag will be removed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `campaigns:write` `tags:write`
     * @summary Remove Tag from Campaigns
     * @param id The Tag ID* @param tagCampaignOp
     
     */
    removeTagFromCampaigns(id: string, tagCampaignOp: TagCampaignOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Remove a tag\'s association with one or more flows.   Use the request body to pass in the ID(s) of the flows(s) whose association with the tag will be removed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:write` `tags:write`
     * @summary Remove Tag from Flows
     * @param id The Tag ID* @param tagFlowOp
     
     */
    removeTagFromFlows(id: string, tagFlowOp: TagFlowOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Remove a tag\'s association with one or more lists.   Use the request body to pass in the ID(s) of the list(s) whose association with the tag will be removed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `lists:write` `tags:write`
     * @summary Remove Tag from Lists
     * @param id The Tag ID* @param tagListOp
     
     */
    removeTagFromLists(id: string, tagListOp: TagListOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Remove a tag\'s association with one or more segments.   Use the request body to pass in the ID(s) of the segments(s) whose association with the tag will be removed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `segments:write` `tags:write`
     * @summary Remove Tag from Segments
     * @param id The Tag ID* @param tagSegmentOp
     
     */
    removeTagFromSegments(id: string, tagSegmentOp: TagSegmentOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Associate a tag with one or more campaigns. Any campaign cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the campaign(s) that will be associated with the tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `campaigns:write` `tags:write`
     * @summary Tag Campaigns
     * @param id The Tag ID* @param tagCampaignOp
     
     */
    tagCampaigns(id: string, tagCampaignOp: TagCampaignOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Associate a tag with one or more flows. Any flow cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the flow(s) that will be associated with the tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:write` `tags:write`
     * @summary Tag Flows
     * @param id The Tag ID* @param tagFlowOp
     
     */
    tagFlows(id: string, tagFlowOp: TagFlowOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Associate a tag with one or more lists. Any list cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the lists(s) that will be associated with the tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `lists:write` `tags:write`
     * @summary Tag Lists
     * @param id The Tag ID* @param tagListOp
     
     */
    tagLists(id: string, tagListOp: TagListOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Associate a tag with one or more segments. Any segment cannot be associated with more than **100** tags.   Use the request body to pass in the ID(s) of the segments(s) that will be associated with the tag.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `segments:write` `tags:write`
     * @summary Tag Segments
     * @param id The Tag ID* @param tagSegmentOp
     
     */
    tagSegments(id: string, tagSegmentOp: TagSegmentOp): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Update the tag with the given tag ID.  Only a tag\'s `name` can be changed. A tag cannot be moved from one tag group to another.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Update Tag
     * @param id The Tag ID* @param tagUpdateQuery
     
     */
    updateTag(id: string, tagUpdateQuery: TagUpdateQuery): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    /**
     * Update the tag group with the given tag group ID.  Only a tag group\'s `name` can be changed. A tag group\'s `exclusive` or `default` value cannot be changed.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `tags:read` `tags:write`
     * @summary Update Tag Group
     * @param id The Tag Group ID* @param tagGroupUpdateQuery
     
     */
    updateTagGroup(id: string, tagGroupUpdateQuery: TagGroupUpdateQuery): Promise<{
        response: AxiosResponse;
        body: PatchTagGroupResponse;
    }>;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getCampaignIdsForTag}
     *
     * @deprecated Use {@link TagsApi.getCampaignIdsForTag} instead
     */
    getTagRelationshipsCampaigns: typeof TagsApi.prototype.getCampaignIdsForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getFlowIdsForTag}
     *
     * @deprecated Use {@link TagsApi.getFlowIdsForTag} instead
     */
    getTagRelationshipsFlows: typeof TagsApi.prototype.getFlowIdsForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getListIdsForTag}
     *
     * @deprecated Use {@link TagsApi.getListIdsForTag} instead
     */
    getTagRelationshipsLists: typeof TagsApi.prototype.getListIdsForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getSegmentIdsForTag}
     *
     * @deprecated Use {@link TagsApi.getSegmentIdsForTag} instead
     */
    getTagRelationshipsSegments: typeof TagsApi.prototype.getSegmentIdsForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagGroupForTag}
     *
     * @deprecated Use {@link TagsApi.getTagGroupForTag} instead
     */
    getTagTagGroup: typeof TagsApi.prototype.getTagGroupForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagGroupForTag}
     *
     * @deprecated Use {@link TagsApi.getTagGroupForTag} instead
     */
    getGroupForTag: typeof TagsApi.prototype.getTagGroupForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagGroupIdForTag}
     *
     * @deprecated Use {@link TagsApi.getTagGroupIdForTag} instead
     */
    getTagRelationshipsTagGroup: typeof TagsApi.prototype.getTagGroupIdForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagGroupIdForTag}
     *
     * @deprecated Use {@link TagsApi.getTagGroupIdForTag} instead
     */
    getGroupIdForTag: typeof TagsApi.prototype.getTagGroupIdForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagGroupIdForTag}
     *
     * @deprecated Use {@link TagsApi.getTagGroupIdForTag} instead
     */
    getTagRelationshipsGroup: typeof TagsApi.prototype.getTagGroupIdForTag;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagIdsForTagGroup}
     *
     * @deprecated Use {@link TagsApi.getTagIdsForTagGroup} instead
     */
    getTagGroupRelationshipsTags: typeof TagsApi.prototype.getTagIdsForTagGroup;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.getTagsForTagGroup}
     *
     * @deprecated Use {@link TagsApi.getTagsForTagGroup} instead
     */
    getTagGroupTags: typeof TagsApi.prototype.getTagsForTagGroup;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromCampaigns}
     *
     * @deprecated Use {@link TagsApi.removeTagFromCampaigns} instead
     */
    deleteTagRelationshipsCampaigns: typeof TagsApi.prototype.removeTagFromCampaigns;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromCampaigns}
     *
     * @deprecated Use {@link TagsApi.removeTagFromCampaigns} instead
     */
    removeCampaignsFromTag: typeof TagsApi.prototype.removeTagFromCampaigns;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromFlows}
     *
     * @deprecated Use {@link TagsApi.removeTagFromFlows} instead
     */
    deleteTagRelationshipsFlows: typeof TagsApi.prototype.removeTagFromFlows;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromFlows}
     *
     * @deprecated Use {@link TagsApi.removeTagFromFlows} instead
     */
    removeFlowsFromTag: typeof TagsApi.prototype.removeTagFromFlows;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromLists}
     *
     * @deprecated Use {@link TagsApi.removeTagFromLists} instead
     */
    deleteTagRelationshipsLists: typeof TagsApi.prototype.removeTagFromLists;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromLists}
     *
     * @deprecated Use {@link TagsApi.removeTagFromLists} instead
     */
    removeListsFromTag: typeof TagsApi.prototype.removeTagFromLists;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromSegments}
     *
     * @deprecated Use {@link TagsApi.removeTagFromSegments} instead
     */
    deleteTagRelationshipsSegments: typeof TagsApi.prototype.removeTagFromSegments;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.removeTagFromSegments}
     *
     * @deprecated Use {@link TagsApi.removeTagFromSegments} instead
     */
    removeSegmentsFromTag: typeof TagsApi.prototype.removeTagFromSegments;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagCampaigns}
     *
     * @deprecated Use {@link TagsApi.tagCampaigns} instead
     */
    createTagRelationshipsCampaign: typeof TagsApi.prototype.tagCampaigns;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagCampaigns}
     *
     * @deprecated Use {@link TagsApi.tagCampaigns} instead
     */
    addCampaignsToTag: typeof TagsApi.prototype.tagCampaigns;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagCampaigns}
     *
     * @deprecated Use {@link TagsApi.tagCampaigns} instead
     */
    createTagRelationshipsCampaigns: typeof TagsApi.prototype.tagCampaigns;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagFlows}
     *
     * @deprecated Use {@link TagsApi.tagFlows} instead
     */
    createTagRelationshipsFlow: typeof TagsApi.prototype.tagFlows;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagFlows}
     *
     * @deprecated Use {@link TagsApi.tagFlows} instead
     */
    addFlowsToTag: typeof TagsApi.prototype.tagFlows;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagFlows}
     *
     * @deprecated Use {@link TagsApi.tagFlows} instead
     */
    createTagRelationshipsFlows: typeof TagsApi.prototype.tagFlows;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagLists}
     *
     * @deprecated Use {@link TagsApi.tagLists} instead
     */
    createTagRelationshipsList: typeof TagsApi.prototype.tagLists;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagLists}
     *
     * @deprecated Use {@link TagsApi.tagLists} instead
     */
    addListsToTag: typeof TagsApi.prototype.tagLists;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagLists}
     *
     * @deprecated Use {@link TagsApi.tagLists} instead
     */
    createTagRelationshipsLists: typeof TagsApi.prototype.tagLists;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagSegments}
     *
     * @deprecated Use {@link TagsApi.tagSegments} instead
     */
    createTagRelationshipsSegment: typeof TagsApi.prototype.tagSegments;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagSegments}
     *
     * @deprecated Use {@link TagsApi.tagSegments} instead
     */
    addSegmentsToTag: typeof TagsApi.prototype.tagSegments;
}
export interface TagsApi {
    /**
     * Alias of {@link TagsApi.tagSegments}
     *
     * @deprecated Use {@link TagsApi.tagSegments} instead
     */
    createTagRelationshipsSegments: typeof TagsApi.prototype.tagSegments;
}
