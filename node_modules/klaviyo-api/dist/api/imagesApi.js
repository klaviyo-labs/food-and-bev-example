"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagesApi = void 0;
const axios = require('axios');
const form_data_1 = __importDefault(require("form-data"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
class ImagesApi {
    constructor(session) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    /**
     * Get the image with the given image ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:read`
     * @summary Get Image
     * @param id The ID of the image
     * @param fieldsImage For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getImage(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getImage.');
            }
            if (options.fieldsImage !== undefined) {
                localVarQueryParameters['fields[image]'] = models_1.ObjectSerializer.serialize(options.fieldsImage, "Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetImageResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all images in an account.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:read`
     * @summary Get Images
     
     * @param fieldsImage For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param filter For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;format&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;any&#x60;, &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;size&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;hidden&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param pageSize Default: 20. Min: 1. Max: 100.* @param sort For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sorting
     */
    getImages(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsImage !== undefined) {
                localVarQueryParameters['fields[image]'] = models_1.ObjectSerializer.serialize(options.fieldsImage, "Array<'name' | 'image_url' | 'format' | 'size' | 'hidden' | 'updated_at'>");
            }
            if (options.filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(options.filter, "string");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            if (options.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(options.sort, "'format' | '-format' | 'id' | '-id' | 'name' | '-name' | 'size' | '-size' | 'updated_at' | '-updated_at'");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetImageResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Update the image with the given image ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:write`
     * @summary Update Image
     * @param id The ID of the image* @param imagePartialUpdateQuery
     
     */
    updateImage(id, imagePartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateImage.');
            }
            // verify required parameter 'imagePartialUpdateQuery' is not null or undefined
            if (imagePartialUpdateQuery === null || imagePartialUpdateQuery === undefined) {
                throw new Error('Required parameter imagePartialUpdateQuery was null or undefined when calling updateImage.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(imagePartialUpdateQuery, "ImagePartialUpdateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchImageResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Upload an image from a file.  If you want to import an image from an existing url or a data uri, use the Upload Image From URL endpoint instead.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `100/m`<br>Daily: `100/d`  **Scopes:** `images:write`
     * @summary Upload Image From File
     * @param file The image file to upload. Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
     * @param name A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.* @param hidden If true, this image is not shown in the asset library.
     */
    uploadImageFromFile(file, name, hidden) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/image-upload';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            const form = new form_data_1.default();
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new Error('Required parameter file was null or undefined when calling uploadImageFromFile.');
            }
            if (file !== undefined) {
                form.append('file', file);
            }
            if (name !== undefined) {
                form.append('name', name.toString());
            }
            if (hidden !== undefined) {
                form.append('hidden', hidden.toString());
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: form,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostImageResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Import an image from a url or data uri.  If you want to upload an image from a file, use the Upload Image From File endpoint instead.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `100/m`<br>Daily: `100/d`  **Scopes:** `images:write`
     * @summary Upload Image From URL
     * @param imageCreateQuery
     
     */
    uploadImageFromUrl(imageCreateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/images';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'imageCreateQuery' is not null or undefined
            if (imageCreateQuery === null || imageCreateQuery === undefined) {
                throw new Error('Required parameter imageCreateQuery was null or undefined when calling uploadImageFromUrl.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(imageCreateQuery, "ImageCreateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostImageResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
}
exports.ImagesApi = ImagesApi;
ImagesApi.prototype.createImageUpload = ImagesApi.prototype.uploadImageFromFile;
ImagesApi.prototype.createImage = ImagesApi.prototype.uploadImageFromUrl;
//# sourceMappingURL=imagesApi.js.map