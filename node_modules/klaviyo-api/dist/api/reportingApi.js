"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportingApi = void 0;
const axios = require('axios');
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
class ReportingApi {
    constructor(session) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    /**
     * Returns the requested campaign analytics values data<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `campaigns:read`
     * @summary Query Campaign Values
     * @param campaignValuesRequestDTO
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
     */
    queryCampaignValues(campaignValuesRequestDTO, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/campaign-values-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'campaignValuesRequestDTO' is not null or undefined
            if (campaignValuesRequestDTO === null || campaignValuesRequestDTO === undefined) {
                throw new Error('Required parameter campaignValuesRequestDTO was null or undefined when calling queryCampaignValues.');
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page_cursor'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(campaignValuesRequestDTO, "CampaignValuesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostCampaignValuesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested flow analytics series data<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `flows:read`
     * @summary Query Flow Series
     * @param flowSeriesRequestDTO
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
     */
    queryFlowSeries(flowSeriesRequestDTO, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-series-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'flowSeriesRequestDTO' is not null or undefined
            if (flowSeriesRequestDTO === null || flowSeriesRequestDTO === undefined) {
                throw new Error('Required parameter flowSeriesRequestDTO was null or undefined when calling queryFlowSeries.');
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page_cursor'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(flowSeriesRequestDTO, "FlowSeriesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostFlowSeriesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested flow analytics values data<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `flows:read`
     * @summary Query Flow Values
     * @param flowValuesRequestDTO
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination
     */
    queryFlowValues(flowValuesRequestDTO, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/flow-values-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'flowValuesRequestDTO' is not null or undefined
            if (flowValuesRequestDTO === null || flowValuesRequestDTO === undefined) {
                throw new Error('Required parameter flowValuesRequestDTO was null or undefined when calling queryFlowValues.');
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page_cursor'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(flowValuesRequestDTO, "FlowValuesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostFlowValuesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested form analytics series data.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `forms:read`
     * @summary Query Form Series
     * @param formSeriesRequestDTO
     
     */
    queryFormSeries(formSeriesRequestDTO) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/form-series-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'formSeriesRequestDTO' is not null or undefined
            if (formSeriesRequestDTO === null || formSeriesRequestDTO === undefined) {
                throw new Error('Required parameter formSeriesRequestDTO was null or undefined when calling queryFormSeries.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(formSeriesRequestDTO, "FormSeriesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostFormSeriesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested form analytics values data.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `forms:read`
     * @summary Query Form Values
     * @param formValuesRequestDTO
     
     */
    queryFormValues(formValuesRequestDTO) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/form-values-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'formValuesRequestDTO' is not null or undefined
            if (formValuesRequestDTO === null || formValuesRequestDTO === undefined) {
                throw new Error('Required parameter formValuesRequestDTO was null or undefined when calling queryFormValues.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(formValuesRequestDTO, "FormValuesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostFormValuesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested segment analytics series data.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `segments:read`
     * @summary Query Segment Series
     * @param segmentSeriesRequestDTO
     
     */
    querySegmentSeries(segmentSeriesRequestDTO) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/segment-series-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'segmentSeriesRequestDTO' is not null or undefined
            if (segmentSeriesRequestDTO === null || segmentSeriesRequestDTO === undefined) {
                throw new Error('Required parameter segmentSeriesRequestDTO was null or undefined when calling querySegmentSeries.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(segmentSeriesRequestDTO, "SegmentSeriesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostSegmentSeriesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Returns the requested segment analytics values data.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `2/m`<br>Daily: `225/d`  **Scopes:** `segments:read`
     * @summary Query Segment Values
     * @param segmentValuesRequestDTO
     
     */
    querySegmentValues(segmentValuesRequestDTO) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/segment-values-reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'segmentValuesRequestDTO' is not null or undefined
            if (segmentValuesRequestDTO === null || segmentValuesRequestDTO === undefined) {
                throw new Error('Required parameter segmentValuesRequestDTO was null or undefined when calling querySegmentValues.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'POST',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(segmentValuesRequestDTO, "SegmentValuesRequestDTO")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PostSegmentValuesResponseDTO");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
}
exports.ReportingApi = ReportingApi;
ReportingApi.prototype.createCampaignValueReport = ReportingApi.prototype.queryCampaignValues;
ReportingApi.prototype.createCampaignValuesReport = ReportingApi.prototype.queryCampaignValues;
ReportingApi.prototype.createFlowSeryReport = ReportingApi.prototype.queryFlowSeries;
ReportingApi.prototype.createFlowSeriesReport = ReportingApi.prototype.queryFlowSeries;
ReportingApi.prototype.createFlowValueReport = ReportingApi.prototype.queryFlowValues;
ReportingApi.prototype.createFlowValuesReport = ReportingApi.prototype.queryFlowValues;
ReportingApi.prototype.createFormSeryReport = ReportingApi.prototype.queryFormSeries;
ReportingApi.prototype.createFormSeriesReport = ReportingApi.prototype.queryFormSeries;
ReportingApi.prototype.createFormValueReport = ReportingApi.prototype.queryFormValues;
ReportingApi.prototype.createFormValuesReport = ReportingApi.prototype.queryFormValues;
ReportingApi.prototype.createSegmentSeryReport = ReportingApi.prototype.querySegmentSeries;
ReportingApi.prototype.createSegmentSeriesReport = ReportingApi.prototype.querySegmentSeries;
ReportingApi.prototype.createSegmentValueReport = ReportingApi.prototype.querySegmentValues;
ReportingApi.prototype.createSegmentValuesReport = ReportingApi.prototype.querySegmentValues;
//# sourceMappingURL=reportingApi.js.map