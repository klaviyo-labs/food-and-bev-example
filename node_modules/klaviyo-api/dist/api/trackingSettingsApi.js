"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackingSettingsApi = void 0;
const axios = require('axios');
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://a.klaviyo.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
class TrackingSettingsApi {
    constructor(session) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.session = session;
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    /**
     * Get the tracking setting with the given account ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `tracking-settings:read`
     * @summary Get Tracking Setting
     * @param id The id of the tracking setting (account ID).
     * @param fieldsTrackingSetting For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets
     */
    getTrackingSetting(id, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/tracking-settings/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTrackingSetting.');
            }
            if (options.fieldsTrackingSetting !== undefined) {
                localVarQueryParameters['fields[tracking-setting]'] = models_1.ObjectSerializer.serialize(options.fieldsTrackingSetting, "Array<'auto_add_parameters' | 'utm_source' | 'utm_source.flow' | 'utm_source.flow.type' | 'utm_source.flow.value' | 'utm_source.campaign' | 'utm_source.campaign.type' | 'utm_source.campaign.value' | 'utm_medium' | 'utm_medium.flow' | 'utm_medium.flow.type' | 'utm_medium.flow.value' | 'utm_medium.campaign' | 'utm_medium.campaign.type' | 'utm_medium.campaign.value' | 'utm_campaign' | 'utm_campaign.flow' | 'utm_campaign.flow.type' | 'utm_campaign.flow.value' | 'utm_campaign.campaign' | 'utm_campaign.campaign.type' | 'utm_campaign.campaign.value' | 'utm_id' | 'utm_id.flow' | 'utm_id.flow.type' | 'utm_id.flow.value' | 'utm_id.campaign' | 'utm_id.campaign.type' | 'utm_id.campaign.value' | 'utm_term' | 'utm_term.flow' | 'utm_term.flow.type' | 'utm_term.flow.value' | 'utm_term.campaign' | 'utm_term.campaign.type' | 'utm_term.campaign.value' | 'custom_parameters'>");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTrackingSettingResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Get all tracking settings in an account. Returns an array with a single tracking setting.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `tracking-settings:read`
     * @summary Get Tracking Settings
     
     * @param fieldsTrackingSetting For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#sparse-fieldsets* @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2025-04-15/reference/api-overview#pagination* @param pageSize Default: 1. Min: 1. Max: 1.
     */
    getTrackingSettings(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/tracking-settings';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            if (options.fieldsTrackingSetting !== undefined) {
                localVarQueryParameters['fields[tracking-setting]'] = models_1.ObjectSerializer.serialize(options.fieldsTrackingSetting, "Array<'auto_add_parameters' | 'utm_source' | 'utm_source.flow' | 'utm_source.flow.type' | 'utm_source.flow.value' | 'utm_source.campaign' | 'utm_source.campaign.type' | 'utm_source.campaign.value' | 'utm_medium' | 'utm_medium.flow' | 'utm_medium.flow.type' | 'utm_medium.flow.value' | 'utm_medium.campaign' | 'utm_medium.campaign.type' | 'utm_medium.campaign.value' | 'utm_campaign' | 'utm_campaign.flow' | 'utm_campaign.flow.type' | 'utm_campaign.flow.value' | 'utm_campaign.campaign' | 'utm_campaign.campaign.type' | 'utm_campaign.campaign.value' | 'utm_id' | 'utm_id.flow' | 'utm_id.flow.type' | 'utm_id.flow.value' | 'utm_id.campaign' | 'utm_id.campaign.type' | 'utm_id.campaign.value' | 'utm_term' | 'utm_term.flow' | 'utm_term.flow.type' | 'utm_term.flow.value' | 'utm_term.campaign' | 'utm_term.campaign.type' | 'utm_term.campaign.value' | 'custom_parameters'>");
            }
            if (options.pageCursor !== undefined) {
                localVarQueryParameters['page[cursor]'] = models_1.ObjectSerializer.serialize(options.pageCursor, "string");
            }
            if (options.pageSize !== undefined) {
                localVarQueryParameters['page[size]'] = models_1.ObjectSerializer.serialize(options.pageSize, "number");
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'GET',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "GetTrackingSettingResponseCollection");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
    /**
     * Update the tracking setting with the given account ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `tracking-settings:write`
     * @summary Update Tracking Setting
     * @param id The id of the tracking setting (account ID).* @param trackingSettingPartialUpdateQuery DTO for updating tracking settings
     
     */
    updateTrackingSetting(id, trackingSettingPartialUpdateQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/tracking-settings/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/vnd.api+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTrackingSetting.');
            }
            // verify required parameter 'trackingSettingPartialUpdateQuery' is not null or undefined
            if (trackingSettingPartialUpdateQuery === null || trackingSettingPartialUpdateQuery === undefined) {
                throw new Error('Required parameter trackingSettingPartialUpdateQuery was null or undefined when calling updateTrackingSetting.');
            }
            (0, apis_1.queryParamPreProcessor)(localVarQueryParameters);
            let config = {
                method: 'PATCH',
                url: localVarPath,
                headers: localVarHeaderParams,
                params: localVarQueryParameters,
                data: models_1.ObjectSerializer.serialize(trackingSettingPartialUpdateQuery, "TrackingSettingPartialUpdateQuery")
            };
            yield this.session.applyToRequest(config);
            const request = (config, retried = false) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const axiosResponse = yield this.session.requestWithRetry(config);
                    let body;
                    body = models_1.ObjectSerializer.deserialize(axiosResponse.data, "PatchTrackingSettingResponse");
                    return ({ response: axiosResponse, body: body });
                }
                catch (error) {
                    if (yield this.session.refreshAndRetry(error, retried)) {
                        yield this.session.applyToRequest(config);
                        return request(config, true);
                    }
                    throw error;
                }
            });
            return request(config);
        });
    }
}
exports.TrackingSettingsApi = TrackingSettingsApi;
//# sourceMappingURL=trackingSettingsApi.js.map