"use strict";
/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextBlockStyles = void 0;
class TextBlockStyles {
    static getAttributeTypeMap() {
        return TextBlockStyles.attributeTypeMap;
    }
}
exports.TextBlockStyles = TextBlockStyles;
TextBlockStyles.attributeTypeMap = [
    {
        "name": "backgroundColor",
        "baseName": "background_color",
        "type": "string"
    },
    {
        "name": "blockBackgroundColor",
        "baseName": "block_background_color",
        "type": "string"
    },
    {
        "name": "blockBorderColor",
        "baseName": "block_border_color",
        "type": "string"
    },
    {
        "name": "blockBorderStyle",
        "baseName": "block_border_style",
        "type": "TextBlockStyles.BlockBorderStyleEnum"
    },
    {
        "name": "blockBorderWidth",
        "baseName": "block_border_width",
        "type": "number"
    },
    {
        "name": "blockPaddingBottom",
        "baseName": "block_padding_bottom",
        "type": "number"
    },
    {
        "name": "blockPaddingLeft",
        "baseName": "block_padding_left",
        "type": "number"
    },
    {
        "name": "blockPaddingRight",
        "baseName": "block_padding_right",
        "type": "number"
    },
    {
        "name": "blockPaddingTop",
        "baseName": "block_padding_top",
        "type": "number"
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "string"
    },
    {
        "name": "extraCssClass",
        "baseName": "extra_css_class",
        "type": "string"
    },
    {
        "name": "fontFamily",
        "baseName": "font_family",
        "type": "string"
    },
    {
        "name": "fontSize",
        "baseName": "font_size",
        "type": "number"
    },
    {
        "name": "fontStyle",
        "baseName": "font_style",
        "type": "TextBlockStyles.FontStyleEnum"
    },
    {
        "name": "fontWeight",
        "baseName": "font_weight",
        "type": "string"
    },
    {
        "name": "innerPaddingBottom",
        "baseName": "inner_padding_bottom",
        "type": "number"
    },
    {
        "name": "innerPaddingLeft",
        "baseName": "inner_padding_left",
        "type": "number"
    },
    {
        "name": "innerPaddingRight",
        "baseName": "inner_padding_right",
        "type": "number"
    },
    {
        "name": "innerPaddingTop",
        "baseName": "inner_padding_top",
        "type": "number"
    },
    {
        "name": "letterSpacing",
        "baseName": "letter_spacing",
        "type": "number"
    },
    {
        "name": "lineHeight",
        "baseName": "line_height",
        "type": "number"
    },
    {
        "name": "mobileStretchContent",
        "baseName": "mobile_stretch_content",
        "type": "boolean"
    },
    {
        "name": "textAlign",
        "baseName": "text_align",
        "type": "TextBlockStyles.TextAlignEnum"
    },
    {
        "name": "textDecoration",
        "baseName": "text_decoration",
        "type": "string"
    },
    {
        "name": "textTableLayout",
        "baseName": "text_table_layout",
        "type": "TextBlockStyles.TextTableLayoutEnum"
    }
];
(function (TextBlockStyles) {
    let BlockBorderStyleEnum;
    (function (BlockBorderStyleEnum) {
        BlockBorderStyleEnum[BlockBorderStyleEnum["Dashed"] = 'dashed'] = "Dashed";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Dotted"] = 'dotted'] = "Dotted";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Groove"] = 'groove'] = "Groove";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Inset"] = 'inset'] = "Inset";
        BlockBorderStyleEnum[BlockBorderStyleEnum["None"] = 'none'] = "None";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Outset"] = 'outset'] = "Outset";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Ridge"] = 'ridge'] = "Ridge";
        BlockBorderStyleEnum[BlockBorderStyleEnum["Solid"] = 'solid'] = "Solid";
    })(BlockBorderStyleEnum = TextBlockStyles.BlockBorderStyleEnum || (TextBlockStyles.BlockBorderStyleEnum = {}));
    let FontStyleEnum;
    (function (FontStyleEnum) {
        FontStyleEnum[FontStyleEnum["Italic"] = 'italic'] = "Italic";
        FontStyleEnum[FontStyleEnum["Normal"] = 'normal'] = "Normal";
    })(FontStyleEnum = TextBlockStyles.FontStyleEnum || (TextBlockStyles.FontStyleEnum = {}));
    let TextAlignEnum;
    (function (TextAlignEnum) {
        TextAlignEnum[TextAlignEnum["Center"] = 'center'] = "Center";
        TextAlignEnum[TextAlignEnum["Left"] = 'left'] = "Left";
        TextAlignEnum[TextAlignEnum["Right"] = 'right'] = "Right";
    })(TextAlignEnum = TextBlockStyles.TextAlignEnum || (TextBlockStyles.TextAlignEnum = {}));
    let TextTableLayoutEnum;
    (function (TextTableLayoutEnum) {
        TextTableLayoutEnum[TextTableLayoutEnum["Auto"] = 'auto'] = "Auto";
        TextTableLayoutEnum[TextTableLayoutEnum["Fixed"] = 'fixed'] = "Fixed";
        TextTableLayoutEnum[TextTableLayoutEnum["Inherit"] = 'inherit'] = "Inherit";
        TextTableLayoutEnum[TextTableLayoutEnum["Initial"] = 'initial'] = "Initial";
    })(TextTableLayoutEnum = TextBlockStyles.TextTableLayoutEnum || (TextBlockStyles.TextTableLayoutEnum = {}));
})(TextBlockStyles = exports.TextBlockStyles || (exports.TextBlockStyles = {}));
//# sourceMappingURL=textBlockStyles.js.map